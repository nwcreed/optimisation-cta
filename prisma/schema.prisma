generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  websites      Website[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Website {
  id         Int          @id @default(autoincrement())
  userId     String       // Lien avec l'utilisateur
  user       User         @relation(fields: [userId], references: [id])
  domain     String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  buttonScans ButtonScan[] // Relation avec les boutons détectés

  @@map("websites")
}


model ButtonScan {
  id          String       @id @default(cuid())
  websiteId   Int
  website     Website      @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  text        String?
  className   String?
  buttonId    String?
  bgColor     String?
  textColor   String?
  width       Int?
  height      Int?
  positionX   Float?
  positionY   Float?
  createdAt   DateTime     @default(now())
  isActive  Boolean  @default(true) 
  
  clicks      Click[]      // Relation avec les clics
  variants    Variant[]    // Relation avec les variantes du bouton


  @@map("button_scans")
}



model Click {
  id        String   @id @default(cuid())
  buttonId  String   // Référence au bouton cliqué
  variantId String?  // Référence à la variante, il est optionnel

  timestamp DateTime @default(now())

  button    ButtonScan @relation(fields: [buttonId], references: [id])
  variant   Variant?   @relation(fields: [variantId], references: [id])

  @@map("clicks")
}


model Variant {
  id          String      @id @default(cuid())
  buttonScanId String     // Référence au bouton d'origine
  buttonScan  ButtonScan  @relation(fields: [buttonScanId], references: [id], onDelete: Cascade)
  text        String?
  className   String?
  buttonId    String?
  bgColor     String?
  textColor   String?
  width       Int?
  height      Int?
  positionX   Float?
  positionY   Float?
  createdAt   DateTime    @default(now())

    clicks      Click[]      // Relation avec les clics

  @@map("variants")
}
