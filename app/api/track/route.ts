import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    console.log("üì© Nouvelle requ√™te re√ßue !");

    // R√©cup√©rer les donn√©es de la requ√™te
    const { websiteId, userId, text } = await req.json();
    console.log("üìù Donn√©es re√ßues :", { websiteId, userId, text });

    // V√©rification des donn√©es requises
    if (!websiteId || !userId || !text) {
      console.error("‚ùå Donn√©es invalides !");
      return NextResponse.json({ error: "Donn√©es invalides" }, { status: 400 });
    }

    // Recherche du bouton principal
    let button = await prisma.buttonScan.findFirst({
      where: {
        websiteId: Number(websiteId),
        text: { equals: text.trim(), mode: "insensitive" },
      },
    });

    if (button) {
      console.log("‚úÖ Bouton principal trouv√© :", button);
    } else {
      console.warn(`‚ö†Ô∏è Aucun bouton principal trouv√© pour "${text}"`);
    }

    // Recherche de la variante avec l'inclusion de buttonScan
    let variant = null;
    if (!button) {
      variant = await prisma.variant.findFirst({
        where: {
          text: { equals: text.trim(), mode: "insensitive" },
          buttonScan: { websiteId: Number(websiteId) },
        },
        include: {
          buttonScan: true, // Assure-toi d'inclure la relation buttonScan
        },
      });

      if (variant) {
        console.log(`‚úÖ Variante trouv√©e : "${variant.text}" (ID: ${variant.id})`);
      } else {
        console.error(`‚ùå Aucun bouton ni variante trouv√©e pour "${text}"`);
        return NextResponse.json({ error: "Bouton ou variante non trouv√©e" }, { status: 404 });
      }
    }

    // ‚úÖ Construction du `clickData` avec `buttonId` et `variantId`
    const clickData: any = {};

    if (button) {
      clickData.buttonId = button.id;
    }

    // Si une variante est trouv√©e, ajouter aussi le `buttonId` du `buttonScan` associ√©
    if (variant) {
      clickData.variantId = variant.id;
      if (variant.buttonScan) {
        clickData.buttonId = variant.buttonScan.id; // R√©cup√©rer le `buttonId` du `buttonScan` li√© √† la variante
      }
    }

    // Log des donn√©es avant l'insertion
    console.log("üìä Donn√©es du clic √† enregistrer :", clickData);

    // V√©rifier qu'au moins un des deux IDs est pr√©sent
    if (!clickData.buttonId) {
      console.error("‚ùå Impossible d'enregistrer le clic : aucun ID trouv√© !");
      return NextResponse.json({ error: "Impossible d'enregistrer le clic" }, { status: 400 });
    }

    // Log d√©taill√© avant cr√©ation dans la DB
    console.log("üîç Donn√©es avant la cr√©ation dans la DB :", clickData);

    // Cr√©ation du clic dans la base de donn√©es
    const click = await prisma.click.create({
      data: clickData,
    });

    // Log de la r√©ponse de la base de donn√©es
    console.log("‚úÖ Clic enregistr√© avec succ√®s :", click);
    return NextResponse.json({ message: "Click enregistr√©", click }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur API click:", error);
    return NextResponse.json({ error: "Erreur interne" }, { status: 500 });
  }
}
